plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.ajoberstar.grgit' version '3.0.0'
}


import org.ajoberstar.grgit.Commit
import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.filters.ReplaceTokens

String majorVersion = 3
String minorVersion = 11
String minecraftMajorVersion = "1.19"
String minecraftMinorVersion = "4"
String minecraftVersion = "${minecraftMajorVersion}.${minecraftMinorVersion}"

Grgit repo = Grgit.open(currentDir: project.projectDir)

Commit commit = repo.head()
String commitHash = commit.abbreviatedId

String branch = System.getenv("BRANCH_NAME") == null ? repo.branch.current().name      : System.getenv("BRANCH_NAME")
String buildNumber = findProperty("BUILD_NUMBER") == null ? commitHash.substring(0,6) : findProperty("BUILD_NUMBER")
String jdDirectory = System.getenv("JAVADOCS_DIR") == null ? null                      : System.getenv("JAVADOCS_DIR")

boolean mainBranch = minecraftMajorVersion == branch
boolean releasing = commit.shortMessage.contains("[release]")

group = 'top.mrxiaom'
archivesBaseName = "RPGItems-reloaded-mc$minecraftVersion"
version = "$majorVersion.$minorVersion.$buildNumber"

String mavenVersion = releasing ? version : "$majorVersion.$minorVersion-SNAPSHOT"

println("version: $version")
println("isReleasing: $releasing")
if (!releasing) {
    println("mavenVersion: $mavenVersion")
}

if (!mainBranch) {
    String branchAddon = branch.replace(minecraftMajorVersion, "")
    version = "$majorVersion.$minorVersion$branchAddon-$buildNumber"
    mavenVersion = releasing ? version : "$majorVersion.$minorVersion$branchAddon-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    // mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://mvn.lumine.io/repository/maven-public/" }
    maven { name 'NyaaCat'; url 'https://ci.nyaacat.com/maven/' }
    maven { name 'Aikar'; url 'https://repo.aikar.co/content/groups/aikar/' }
    maven { name 'Spigot'; url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { name 'Sonatype'; url 'https://oss.sonatype.org/content/groups/public' }
    maven { name 'sk89q'; url 'https://maven.sk89q.com/artifactory/repo/' }
    maven { name 'vault-repo'; url 'https://jitpack.io' }
    maven { name 'aikar';     url 'https://repo.aikar.co/content/groups/aikar/' }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

dependencies {
    api "org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT"
    api "org.spigotmc:spigot:$minecraftVersion-R0.1-SNAPSHOT" // lumine
    compileOnly "cat.nyaa:nyaautils:8.0-SNAPSHOT"

    compileOnly 'io.netty:netty-all:4.1.25.Final' // netty is shadowed inside spigot jar
    compileOnly 'org.ow2.asm:asm:7.0'
    compileOnly 'cglib:cglib-nodep:3.2.12'
    shadow 'cglib:cglib-nodep:3.2.12'

    api 'com.udojava:EvalEx:2.1'
    shadow 'com.udojava:EvalEx:2.1'
    api 'co.aikar:taskchain-bukkit:3.7.2'
    shadow "co.aikar:taskchain-bukkit:3.7.2"

    implementation('com.sk89q.worldguard:worldguard-core:7.0.4-SNAPSHOT')
    implementation('com.sk89q.worldguard:worldguard-bukkit:7.0.4-SNAPSHOT') {
        exclude group: 'io.papermc', module: 'paperlib'
        exclude group: 'org.bstats', module: 'bstats-bukkit'
        exclude group: 'org.bukkit', module: 'bukkit'
    }
    compileOnly('com.meowj:LangUtils:2.4-SNAPSHOT')
    compileOnly('net.milkbowl.vault:VaultAPI:1.7') { transitive = false }  // soft dep
    // implementation fileTree(dir: 'libs', includes: ['*.jar'])

    implementation 'com.google.code.findbugs:jsr305:1.3.9'
    implementation('net.milkbowl.vault:VaultAPI:1.7') {
        transitive = false
    }
}

tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        expand('version': project.version)
        include 'plugin.yml'
    }
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: ['GIT_BRANCH': branch, 'GIT_HASH': commitHash], beginToken: '{', endToken: '}')
        include 'lang/'
    }
}

jar {
    archiveClassifier.set('core')
    dependsOn shadowJar
}

shadowJar {
    archiveClassifier.set('release')
    // relocate 'net.sf.cglib', 'cat.nyaa.cglib'
    configurations = [project.configurations.shadow]
}

task apiJar(type: Jar) {
    includeEmptyDirs = false
    from sourceSets.main.output.classesDirs
    include('**/think/rpgitems/RPGItems.class')
    include('**/think/rpgitems/Events.class')
    include('**/think/rpgitems/api/')
    include('**/think/rpgitems/item/')
    include('**/think/rpgitems/power/')
    include('**/think/rpgitems/event/')
    include('**/think/rpgitems/utils/')
    exclude('**/think/rpgitems/power/impl/')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task checkRelease() {
    doLast {
        if (!releasing) {
            throw new GradleException("This is a canary version, use with caution!")
        }
    }
}

// write javadocs to an external folder which can be served via nginx
if (jdDirectory != null) {
    javadoc.destinationDir = file("${jdDirectory}/rpgitems-${mavenVersion}")
}

javadoc {
    (options as StandardJavadocDocletOptions).with {
        links 'https://docs.oracle.com/javase/8/docs/api/'
        links 'https://hub.spigotmc.org/javadocs/spigot/'
        links 'https://ci.md-5.net/job/BungeeCord/ws/chat/target/apidocs/'
        links 'https://netty.io/4.1/api/'

        locale 'en_US'
        encoding 'UTF-8'
        docEncoding 'UTF-8'
        addBooleanOption('keywords', true)
        addBooleanOption('Xdoclint:none', true)

        def currentJavaVersion = JavaVersion.current()
        if (currentJavaVersion > JavaVersion.VERSION_1_9) {
            options.addBooleanOption('html5', true)
        }

        windowTitle = "RPGItems Javadoc"
        docTitle = "<b>RPGItems</b> " + version
        if (!mainBranch) {
            docTitle += branch.replace(minecraftMajorVersion, "")
        }
    }
}


publishing {
    publications {
        mavenRelease(MavenPublication) {
            from components.java
            groupId "top.mrxiaom"
            artifactId "rpgitems"
            version "$mavenVersion"

            artifact apiJar
            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'RPGItems-reloaded'
                description = 'The legacy RPGItems continues. (fork)'
                url = 'https://github.com/MrXiaoM/RPGItems-reloaded'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://mit-license.org/'
                    }
                }
                developers {
                    developer {
                        name = 'MrXiaoM'
                        email = 'mrxiaom@qq.com'
                    }
                }
                scm {
                    url = 'https://github.com/MrXiaoM/RPGItems-reloaded'
                    connection = 'scm:git:https://github.com/MrXiaoM/RPGItems-reloaded.git'
                    developerConnection = 'scm:git:https://github.com/MrXiaoM/RPGItems-reloaded.git'
                }
            }
        }
    }
}
signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.mavenRelease
}
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("MAVEN_USERNAME")
            password = findProperty("MAVEN_PASSWORD")
        }
    }
}